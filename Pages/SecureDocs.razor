@page "/secure-docs"
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@implements IAsyncDisposable
@using blazor_wasm_docsie_sample.Services

<PageTitle>Secure Docsie Documentation</PageTitle>

<div style="padding: 20px;">
    <h1>Secure Docsie Documentation (JWT Auth)</h1>
    <p>This component demonstrates JWT-authenticated access to secured Docsie deployments.</p>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="padding: 15px; background: #fee; border: 1px solid #fcc; border-radius: 4px; margin: 20px 0;">
            <strong>Error:</strong> @errorMessage
        </div>
    }

    @if (isLoading)
    {
        <div style="padding: 20px; text-align: center;">
            <p>Loading secure documentation...</p>
        </div>
    }

    <!-- Important: This div is isolated from Blazor's render tree -->
    @((MarkupString)"<div id=\"secure-docsie-container\" data-ddsroot></div>")
</div>

@code {
    private IJSObjectReference? module;
    private bool isInitialized = false;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            try
            {
                // Import our JavaScript module
                module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./js/secure-docsie-loader.js");

                // Get JWT token from backend API
                string? jwtToken = await AuthService.GetJwtTokenAsync();

                if (string.IsNullOrEmpty(jwtToken))
                {
                    errorMessage = "Failed to get authentication token from server. Make sure the API server is running on http://localhost:5145";
                    isLoading = false;
                    StateHasChanged();
                    return;
                }

                Console.WriteLine($"Got JWT token: {jwtToken.Substring(0, 50)}...");

                // Initialize Docsie with deployment ID and JWT
                // The JS will add token to URL and set fallback to our login page
                await module.InvokeVoidAsync("initializeSecureDocsie",
                    "deployment_No7ZEhXLoDHoW4RH7",
                    jwtToken);

                isInitialized = true;
                isLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error initializing secure Docsie: {ex.Message}";
                isLoading = false;
                StateHasChanged();
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.InvokeVoidAsync("cleanupSecureDocsie");
            }
            catch { }

            await module.DisposeAsync();
        }
    }
}
